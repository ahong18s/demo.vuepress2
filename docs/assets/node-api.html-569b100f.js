import{_ as o,r,o as u,c,d as i,a as e,b as l,w as a,e as d}from"./app-09910f35.js";const p={},h=e("h1",{id:"node-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#node-api","aria-hidden":"true"},"#"),l(" Node API")],-1),v={href:"https://www.npmjs.com/package/@vuepress/core",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.npmjs.com/package/vuepress",target:"_blank",rel:"noopener noreferrer"},g=d(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npm i -D @vuepress/core@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="app" tabindex="-1"><a class="header-anchor" href="#app" aria-hidden="true">#</a> App</h2>`,2),b=d(`<p><code>BuildApp</code> 和 <code>DevApp</code> 除了 <a href="#build">build</a> 和 <a href="#dev">dev</a> 方法外，拥有一样的属性和方法。</p><h3 id="createbuildapp" tabindex="-1"><a class="header-anchor" href="#createbuildapp" aria-hidden="true">#</a> createBuildApp</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>const createBuildApp: (config: AppConfig) =&gt; BuildApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>config</td><td><code>AppConfig</code></td><td>创建 VuePress App 的选项。</td></tr></tbody></table><ul><li><p>详情：</p><p>创建一个 Build 模式的 App 实例，用于构建静态文件。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>const build = async () =&gt; {
  const app = createBuildApp({
    // ...配置项
  })

  // 初始化和准备
  await app.init()
  await app.prepare()

  // 构建
  await app.build()

  // 处理 onGenerated hook
  await app.pluginApi.hooks.onGenerated.process(app)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考： <ul><li><a href="#build">Node API &gt; App 方法 &gt; build</a></li></ul></li></ul><h3 id="createdevapp" tabindex="-1"><a class="header-anchor" href="#createdevapp" aria-hidden="true">#</a> createDevApp</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>const createDevApp: (config: AppConfig) =&gt; DevApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>config</td><td><code>AppConfig</code></td><td>创建 VuePress App 的选项。</td></tr></tbody></table><ul><li><p>详情：</p><p>创建一个 Dev 模式的 App 实例，用于启动开发服务器。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>const dev = async () =&gt; {
  const app = createDevApp({
    // ...配置项
  })

  // 初始化和准备
  await app.init()
  await app.prepare()

  // 启动开发服务器
  const closeDevServer = await app.dev()

  // 准备文件监听器
  const watchers = []

  // 重启开发服务器
  const restart = async () =&gt; {
    await Promise.all([
      // 关闭所有监听器
      ...watchers.map((item) =&gt; item.close()),
      // 关闭当前的开发服务器
      closeDevServer(),
    ])
    await dev()
  }

  // 处理 onWatched hook
  await app.pluginApi.hooks.onWatched.process(app, watchers, restart)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考： <ul><li><a href="#dev">Node API &gt; App 方法 &gt; dev</a></li></ul></li></ul><h2 id="app-属性" tabindex="-1"><a class="header-anchor" href="#app-属性" aria-hidden="true">#</a> App 属性</h2><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><ul><li><p>类型： <code>AppOptions</code></p></li><li><p>详情：</p><p>VuePress App 的配置项。</p><p>这些配置项来自于 <a href="#createbuildapp">createBuildApp</a> / <a href="#createdevapp">createDevApp</a> 的 <code>config</code> 参数，但所有可选的字段都填充上了默认值。</p></li></ul><h3 id="sitedata" tabindex="-1"><a class="header-anchor" href="#sitedata" aria-hidden="true">#</a> siteData</h3>`,21),_=e("li",null,[e("p",null,[l("类型： "),e("code",null,"SiteData")])],-1),f=e("p",null,"详情：",-1),k=d('<h3 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> version</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>VuePress App 的版本，即 <code>@vuepress/core</code> 包的版本。</p></li></ul><h3 id="env-isbuild" tabindex="-1"><a class="header-anchor" href="#env-isbuild" aria-hidden="true">#</a> env.isBuild</h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>详情：</p><p>用于判断 App 是否运行在 Build 模式的环境标记，即当前 App 是否是 <a href="#createbuildapp">BuildApp</a> 实例。</p></li></ul><h3 id="env-isdev" tabindex="-1"><a class="header-anchor" href="#env-isdev" aria-hidden="true">#</a> env.isDev</h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>详情：</p><p>用于判断 App 是否运行在 Dev 模式的环境标记，即当前 App 是否是 <a href="#createdevapp">DevApp</a> 实例。</p></li></ul><h3 id="env-isdebug" tabindex="-1"><a class="header-anchor" href="#env-isdebug" aria-hidden="true">#</a> env.isDebug</h3><ul><li><p>类型： <code>boolean</code></p></li><li><p>详情：</p><p>用于判断 App 是否开启 Debug 模式的环境标记。</p></li></ul><h3 id="markdown" tabindex="-1"><a class="header-anchor" href="#markdown" aria-hidden="true">#</a> markdown</h3>',9),P=e("li",null,[e("p",null,[l("类型： "),e("code",null,"MarkdownIt")])],-1),x=e("p",null,"详情：",-1),A={href:"https://github.com/markdown-it/markdown-it",target:"_blank",rel:"noopener noreferrer"},w=e("h3",{id:"pages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pages","aria-hidden":"true"},"#"),l(" pages")],-1),y=e("li",null,[e("p",null,[l("类型： "),e("code",null,"Page[]")])],-1),B=e("p",null,"详情：",-1),E=e("p",null,[e("a",{href:"#page"},"Page"),l(" 对象数组。")],-1),D=d(`<h2 id="app-方法" tabindex="-1"><a class="header-anchor" href="#app-方法" aria-hidden="true">#</a> App 方法</h2><h3 id="dir" tabindex="-1"><a class="header-anchor" href="#dir" aria-hidden="true">#</a> dir</h3><ul><li><p>工具函数：</p><ul><li><code>dir.cache()</code>： 解析至缓存目录</li><li><code>dir.temp()</code>： 解析至临时文件目录</li><li><code>dir.source()</code>： 解析至源文件目录</li><li><code>dir.dest()</code>： 解析至输出目录</li><li><code>dir.client()</code>： 解析至 <code>@vuepress/client</code> 目录</li><li><code>dir.public()</code>： 解析至 Public 文件目录</li></ul></li><li><p>函数签名：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>type AppDirFunction = (...args: string[]) =&gt; string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>用于解析对应目录下的文件绝对路径的一些工具函数。</p><p>如果你不传入任何参数，就会返回对应目录的绝对路径。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>// 解析 \`\${sourceDir}/README.md\` 文件的绝对路径
const homeSourceFile = app.dir.source(&#39;README.md&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="writetemp" tabindex="-1"><a class="header-anchor" href="#writetemp" aria-hidden="true">#</a> writeTemp</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>writeTemp(file: string, content: string): Promise&lt;string&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td><code>string</code></td><td>要写入的临时文件的路径，相对于临时文件目录。</td></tr><tr><td>content</td><td><code>string</code></td><td>要写入的临时文件路径的内容。</td></tr></tbody></table><ul><li><p>详情：</p><p>用于写入临时文件的方法。</p><p>写入的文件可以在客户端文件中通过 <code>@temp</code> 别名来引入。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>export default {
  // 在 onPrepared hook 中写入临时文件
  async onPrepared() {
    await app.writeTemp(&#39;foo.js&#39;, &#39;export const foo = \\&#39;bar\\&#39;&#39;)
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>// 在客户端文件中引入临时文件
import { foo } from &#39;@temp/foo&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>init(): Promise&lt;void&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17),M=e("li",null,[e("p",null,"详情："),e("p",null,"初始化 VuePress App 。")],-1),I=e("p",null,"参考：",-1),F=d(`<h3 id="prepare" tabindex="-1"><a class="header-anchor" href="#prepare" aria-hidden="true">#</a> prepare</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>prepare(): Promise&lt;void&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),R=e("li",null,[e("p",null,"详情："),e("p",null,"准备客户端临时文件。")],-1),N=e("p",null,"参考：",-1),V=d(`<h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> build</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>build(): Promise&lt;void&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),C=e("li",null,[e("p",null,"详情："),e("p",null,"生成静态站点文件。"),e("p",null,[l("该方法仅在 "),e("a",{href:"#createbuildapp"},"BuildApp"),l(" 中可用。")])],-1),H=e("p",null,"参考：",-1),z=d(`<h3 id="dev" tabindex="-1"><a class="header-anchor" href="#dev" aria-hidden="true">#</a> dev</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>dev(): Promise&lt;() =&gt; Promise&lt;void&gt;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),L=e("li",null,[e("p",null,"详情："),e("p",null,"启动开发服务器。"),e("p",null,[l("该方法仅在 "),e("a",{href:"#createdevapp"},"DevApp"),l(" 中可用。")])],-1),S=e("p",null,"参考：",-1),j=d(`<h2 id="page" tabindex="-1"><a class="header-anchor" href="#page" aria-hidden="true">#</a> Page</h2><h3 id="createpage" tabindex="-1"><a class="header-anchor" href="#createpage" aria-hidden="true">#</a> createPage</h3><ul><li>函数签名：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>const createPage: (app: App, options: PageOptions) =&gt; Promise&lt;Page&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>app</td><td><code>App</code></td><td>VuePress App 实例。</td></tr><tr><td>options</td><td><code>PageOptions</code></td><td>创建 VuePress Page 的选项。</td></tr></tbody></table><ul><li><p>详情：</p><p>创建一个 VuePress Page 对象。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>import { createPage } from &#39;@vuepress/core&#39;

export default {
  // 在 onInitialized hook 中创建一个额外页面
  async onInitialized(app) {
    app.pages.push(
      await createPage(app, {
        path: &#39;/foo.html&#39;,
        frontmatter: {
          layout: &#39;Layout&#39;,
        },
        content: \`\\
# 某个 Page

你好，世界。
\`,
      })
    )
  },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),T=e("li",null,[e("a",{href:"#pages"},"Node API > App 属性 > pages")],-1),O=e("h2",{id:"page-属性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#page-属性","aria-hidden":"true"},"#"),l(" Page 属性")],-1),G=e("h3",{id:"key",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key","aria-hidden":"true"},"#"),l(" key")],-1),W=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),K=e("p",null,"详情：",-1),U=e("p",null,"该 Page 的标识。",-1),$={href:"https://router.vuejs.org/api/#name-2",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,"参考：",-1),J=e("h3",{id:"path",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#path","aria-hidden":"true"},"#"),l(" path")],-1),Q=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),X=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的路由路径。")],-1),Y=e("p",null,"参考：",-1),Z=e("li",null,[e("a",{href:"#pathinferred"},"Node API > Page 属性 > pathInferred")],-1),ee=e("h3",{id:"title",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#title","aria-hidden":"true"},"#"),l(" title")],-1),le=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),ie=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的标题。")],-1),ne=e("p",null,"参考：",-1),ae=e("h3",{id:"lang",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#lang","aria-hidden":"true"},"#"),l(" lang")],-1),de=d("<li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的语言。</p></li><li><p>示例：</p><ul><li><code>&#39;en-US&#39;</code></li><li><code>&#39;zh-CN&#39;</code></li></ul></li>",3),te=e("p",null,"参考：",-1),re=e("h3",{id:"frontmatter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#frontmatter","aria-hidden":"true"},"#"),l(" frontmatter")],-1),se=e("li",null,[e("p",null,[l("类型： "),e("code",null,"PageFrontmatter")])],-1),oe=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的 Frontmatter 。")],-1),ue=e("p",null,"参考：",-1),ce=d(`<h3 id="headers" tabindex="-1"><a class="header-anchor" href="#headers" aria-hidden="true">#</a> headers</h3><ul><li>类型： <code>PageHeader[]</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>interface PageHeader {
  level: number
  title: string
  slug: string
  children: PageHeader[]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),pe=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的小标题。")],-1),he=e("p",null,"参考：",-1),ve=d(`<h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3><ul><li>类型： <code>PageData</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>interface PageData {
  key: string
  path: string
  title: string
  lang: string
  frontmatter: PageFrontmatter
  headers: PageHeader[]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),me=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的数据。"),e("p",null,"Page 数据可以在客户端代码中使用。")],-1),ge=e("p",null,"参考：",-1),be=d('<h3 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> content</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的未经渲染的原始内容。</p></li></ul><h3 id="contentrendered" tabindex="-1"><a class="header-anchor" href="#contentrendered" aria-hidden="true">#</a> contentRendered</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的渲染后的内容。</p></li></ul><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> date</h3>',5),_e=d("<li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的日期，遵从 &#39;yyyy-MM-dd&#39; 格式。</p></li><li><p>示例：</p><ul><li><code>&#39;0000-00-00&#39;</code></li><li><code>&#39;2021-08-16</code>&#39;</li></ul></li>",3),fe=e("p",null,"参考：",-1),ke=e("h3",{id:"deps",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deps","aria-hidden":"true"},"#"),l(" deps")],-1),Pe=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string[]")])],-1),xe=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的依赖。"),e("p",null,[l("举例来说，如果在页面中导入了代码片段，那么被导入文件的绝对路径就会被添加到 "),e("code",null,"deps"),l(" 中。")])],-1),Ae=e("p",null,"参考：",-1),we=d(`<h3 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> links</h3><ul><li>类型： <code>MarkdownLink[]</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>interface MarkdownLink {
  raw: string
  relative: string
  absolute: string
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>该 Page 内容中包含的链接。</p></li></ul><h3 id="markdownenv" tabindex="-1"><a class="header-anchor" href="#markdownenv" aria-hidden="true">#</a> markdownEnv</h3>`,5),ye=d("<li><p>类型： <code>Record&lt;string, unknown&gt;</code></p></li><li><p>详情：</p><p>在使用 markdown-it 解析 Markdown 内容时的 <code>env</code> 对象。</p><p>一些 markdown-it 插件可能会在这个对象中存储一些额外的信息，你可以使用它们来进行高级定制化。</p><p>需要注意的是，其他的一些 Page 属性其实也是从 <code>env</code> 对象中获取到的，但是我们已经把这些属性从 <code>page.markdownEnv</code> 中移除掉了。</p></li>",2),Be=e("p",null,"参考：",-1),Ee={href:"https://markdown-it.github.io/markdown-it/#MarkdownIt.parse",target:"_blank",rel:"noopener noreferrer"},De=e("h3",{id:"pathinferred",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pathinferred","aria-hidden":"true"},"#"),l(" pathInferred")],-1),Me=d('<li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>该 Page 根据文件路径推断出的路由路径。</p><p>默认情况下，路由路径是根据 Markdown 源文件的相对文件路径推断出来的。然而，用户可能会显式指定页面路由，比如通过 <a href="#permalink">permalink</a> 来指定该页面最终使用的路由路径。因此我们在 Page 属性中保留推断出来的路径，以便于你在某些情况下可能会用到它。</p><p>如果该 Page 不是来自于 Markdown 源文件，那么该属性会为 <code>null</code> 。</p></li><li><p>示例：</p><ul><li><code>&#39;/&#39;</code></li><li><code>&#39;/foo.html&#39;</code></li></ul></li>',3),Ie=e("p",null,"参考：",-1),Fe=e("li",null,[e("a",{href:"#path"},"Node API > Page 属性 > path")],-1),Re=e("h3",{id:"pathlocale",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pathlocale","aria-hidden":"true"},"#"),l(" pathLocale")],-1),Ne=d("<li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 路由路径的 Locale 前缀。</p><p>它是根据页面的 Markdown 源文件相对路径、以及用户配置的 <code>locales</code> 的键推断得到的。</p></li><li><p>示例：</p><ul><li><code>&#39;/&#39;</code></li><li><code>&#39;/en/&#39;</code></li><li><code>&#39;/zh/&#39;</code></li></ul></li>",3),Ve=e("p",null,"参考：",-1),Ce=e("h3",{id:"permalink",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#permalink","aria-hidden":"true"},"#"),l(" permalink")],-1),He=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string | null")])],-1),ze=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 的永久链接。")],-1),Le=e("p",null,"参考：",-1),Se=e("h3",{id:"routemeta",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#routemeta","aria-hidden":"true"},"#"),l(" routeMeta")],-1),je=e("li",null,[e("p",null,[l("类型： "),e("code",null,"Record<string, unknown>")])],-1),Te=e("li",null,[e("p",null,"详情："),e("p",null,"附加到 vue-router 路由记录上的额外数据。")],-1),Oe=e("p",null,"参考：",-1),Ge={href:"https://router.vuejs.org/zh/api/#meta",target:"_blank",rel:"noopener noreferrer"},We=d('<div class="custom-container tip"><p class="custom-container-title">Route Meta 和 Page Data 的区别是什么？</p><p><a href="#routemeta">Route Meta</a> 和 <a href="#data">Page Data</a> 都可以在客户端代码中使用。然而， Route Meta 是附加在路由记录上的，因此当用户进入你的站点时，所有页面的 Route Meta 都会立即被加载。相比之下， Page Data 是存储在单独的文件中的，只有在用户进入对应页面时才会被加载。</p><p>因此，不建议在 Route Meta 中存储大量的信息，否则在站点有很多页面时，将会影响站点的初始加载速度。</p></div><h3 id="sfcblocks" tabindex="-1"><a class="header-anchor" href="#sfcblocks" aria-hidden="true">#</a> sfcBlocks</h3>',2),Ke=e("li",null,[e("p",null,[l("类型： "),e("code",null,"MarkdownSfcBlocks")])],-1),Ue=e("li",null,[e("p",null,"详情："),e("p",null,"该 Page 中提取出的 Vue SFC Blocks 。")],-1),$e=e("p",null,"参考：",-1),qe=d('<h3 id="slug" tabindex="-1"><a class="header-anchor" href="#slug" aria-hidden="true">#</a> slug</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>该 Page 的 Slug 。</p><p>它是根据页面的 Markdown 源文件的文件名推断得到的。</p></li></ul><h3 id="filepath" tabindex="-1"><a class="header-anchor" href="#filepath" aria-hidden="true">#</a> filePath</h3><ul><li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>该 Page 的 Markdown 源文件的绝对路径。</p><p>如果该 Page 不是来自于 Markdown 源文件，那么该属性会为 <code>null</code> 。</p></li></ul><h3 id="filepathrelative" tabindex="-1"><a class="header-anchor" href="#filepathrelative" aria-hidden="true">#</a> filePathRelative</h3><ul><li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>该 Page 的 Markdown 源文件的相对路径。</p><p>如果该 Page 不是来自于 Markdown 源文件，那么该属性会为 <code>null</code> 。</p></li></ul>',6);function Je(Qe,Xe){const s=r("NpmBadge"),t=r("ExternalLinkIcon"),n=r("RouterLink");return u(),c("div",null,[h,i(s,{package:"@vuepress/core"}),e("p",null,[l("Node API 是由 "),e("a",v,[l("@vuepress/core"),i(t)]),l(" 包提供的。它是 "),e("a",m,[l("vuepress"),i(t)]),l(" 包的依赖之一，当然你也可以单独安装它：")]),g,e("p",null,[i(n,{to:"/reference/plugin-api.html"},{default:a(()=>[l("插件 API")]),_:1}),l(" 的所有 Hooks 中都可以获取到 App 实例。")]),b,e("ul",null,[_,e("li",null,[f,e("p",null,[l("由用户设置的站点数据，包含所有的 "),i(n,{to:"/reference/config.html#%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE"},{default:a(()=>[l("站点配置")]),_:1}),l(" ，可以在客户端代码中使用。")])])]),k,e("ul",null,[P,e("li",null,[x,e("p",null,[l("用于解析 Markdown 内容的 "),e("a",A,[l("markdown-it"),i(t)]),l(" 实例。")]),e("p",null,[l("它仅在 "),i(n,{to:"/reference/plugin-api.html#oninitialized"},{default:a(()=>[l("onInitialized")]),_:1}),l(" 以及之后的 Hooks 中才可用。")])])]),w,e("ul",null,[y,e("li",null,[B,E,e("p",null,[l("它仅在 "),i(n,{to:"/reference/plugin-api.html#oninitialized"},{default:a(()=>[l("onInitialized")]),_:1}),l(" 以及之后的 Hooks 中才可用。")])])]),D,e("ul",null,[M,e("li",null,[I,e("ul",null,[e("li",null,[i(n,{to:"/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:a(()=>[l("深入 > 架构 > 核心流程与 Hooks")]),_:1})])])])]),F,e("ul",null,[R,e("li",null,[N,e("ul",null,[e("li",null,[i(n,{to:"/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:a(()=>[l("深入 > 架构 > 核心流程与 Hooks")]),_:1})])])])]),V,e("ul",null,[C,e("li",null,[H,e("ul",null,[e("li",null,[i(n,{to:"/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:a(()=>[l("深入 > 架构 > 核心流程与 Hooks")]),_:1})])])])]),z,e("ul",null,[L,e("li",null,[S,e("ul",null,[e("li",null,[i(n,{to:"/advanced/architecture.html#%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B%E4%B8%8E-hooks"},{default:a(()=>[l("深入 > 架构 > 核心流程与 Hooks")]),_:1})])])])]),j,e("ul",null,[e("li",null,[l("参考： "),e("ul",null,[T,e("li",null,[i(n,{to:"/advanced/cookbook/adding-extra-pages.html"},{default:a(()=>[l("Cookbook > 添加额外页面")]),_:1})])])])]),O,G,e("ul",null,[W,e("li",null,[K,U,e("p",null,[l("Page Key 会被用作页面路由的 "),e("a",$,[l("name"),i(t)]),l("。")])]),e("li",null,[q,e("ul",null,[e("li",null,[i(n,{to:"/reference/components.html#content"},{default:a(()=>[l("Built-in Components > Content")]),_:1})])])])]),J,e("ul",null,[Q,X,e("li",null,[Y,e("ul",null,[e("li",null,[i(n,{to:"/guide/page.html#%E8%B7%AF%E7%94%B1"},{default:a(()=>[l("指南 > 页面 > 路由")]),_:1})]),Z])])]),ee,e("ul",null,[le,ie,e("li",null,[ne,e("ul",null,[e("li",null,[i(n,{to:"/reference/frontmatter.html#title"},{default:a(()=>[l("Frontmatter > title")]),_:1})])])])]),ae,e("ul",null,[de,e("li",null,[te,e("ul",null,[e("li",null,[i(n,{to:"/reference/frontmatter.html#title"},{default:a(()=>[l("Frontmatter > lang")]),_:1})])])])]),re,e("ul",null,[se,oe,e("li",null,[ue,e("ul",null,[e("li",null,[i(n,{to:"/reference/frontmatter.html"},{default:a(()=>[l("Frontmatter")]),_:1})])])])]),ce,e("ul",null,[pe,e("li",null,[he,e("ul",null,[e("li",null,[i(n,{to:"/reference/config.html#markdown-headers"},{default:a(()=>[l("配置 > markdown.headers")]),_:1})])])])]),ve,e("ul",null,[me,e("li",null,[ge,e("ul",null,[e("li",null,[i(n,{to:"/reference/client-api.html#usepagedata"},{default:a(()=>[l("客户端 API > usePageData")]),_:1})]),e("li",null,[i(n,{to:"/reference/plugin-api.html#extendspage"},{default:a(()=>[l("插件 API > extendsPage")]),_:1})])])])]),be,e("ul",null,[_e,e("li",null,[fe,e("ul",null,[e("li",null,[i(n,{to:"/reference/frontmatter.html#date"},{default:a(()=>[l("Frontmatter > date")]),_:1})])])])]),ke,e("ul",null,[Pe,xe,e("li",null,[Ae,e("ul",null,[e("li",null,[i(n,{to:"/reference/config.html#markdown-importcode"},{default:a(()=>[l("配置 > markdown.importCode")]),_:1})])])])]),we,e("ul",null,[ye,e("li",null,[Be,e("ul",null,[e("li",null,[e("a",Ee,[l("markdown-it > API Documentation > MarkdownIt > parse"),i(t)])])])])]),De,e("ul",null,[Me,e("li",null,[Ie,e("ul",null,[e("li",null,[i(n,{to:"/guide/page.html#%E8%B7%AF%E7%94%B1"},{default:a(()=>[l("指南 > 页面 > 路由")]),_:1})]),Fe])])]),Re,e("ul",null,[Ne,e("li",null,[Ve,e("ul",null,[e("li",null,[i(n,{to:"/reference/config.html#locales"},{default:a(()=>[l("配置 > locales")]),_:1})])])])]),Ce,e("ul",null,[He,ze,e("li",null,[Le,e("ul",null,[e("li",null,[i(n,{to:"/reference/frontmatter.html#permalink"},{default:a(()=>[l("Frontmatter > permalink")]),_:1})]),e("li",null,[i(n,{to:"/reference/frontmatter.html#permalinkpattern"},{default:a(()=>[l("Frontmatter > permalinkPattern")]),_:1})])])])]),Se,e("ul",null,[je,Te,e("li",null,[Oe,e("ul",null,[e("li",null,[i(n,{to:"/reference/frontmatter.html#routemeta"},{default:a(()=>[l("Frontmatter > routeMeta")]),_:1})]),e("li",null,[e("a",Ge,[l("vue-router > API 参考 > RouteRecordRaw > meta"),i(t)])])])])]),We,e("ul",null,[Ke,Ue,e("li",null,[$e,e("ul",null,[e("li",null,[i(n,{to:"/reference/config.html#markdown-sfc"},{default:a(()=>[l("配置 > markdown.sfc")]),_:1})])])])]),qe])}const Ze=o(p,[["render",Je],["__file","node-api.html.vue"]]);export{Ze as default};
