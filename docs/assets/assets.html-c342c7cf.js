import{_ as t}from"./hero-91b5dea0.js";import{_ as l,r,o,c,a,b as e,d as i,w as n,e as d}from"./app-8ceb8f5d.js";const u={},m=d(`<h1 id="assets" tabindex="-1"><a class="header-anchor" href="#assets" aria-hidden="true">#</a> Assets</h1><h2 id="relative-urls" tabindex="-1"><a class="header-anchor" href="#relative-urls" aria-hidden="true">#</a> Relative URLs</h2><p>You can reference any assets using relative URLs in your Markdown content:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>![An image](./image.png)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>![An image](image.png)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is generally the suggested way to import images, as users usually place images near the Markdown file that references them.</p><h2 id="public-files" tabindex="-1"><a class="header-anchor" href="#public-files" aria-hidden="true">#</a> Public Files</h2><p>You can put some static assets inside public directory, and they will be copied to the root of the generated directory.</p>`,9),p=a("code",null,".vuepress/public",-1),v=d(`<p>It would be useful in some cases:</p><ul><li>You may need to provide static assets that are not directly referenced in any of your Markdown files, for example, favicon and PWA icons.</li><li>You may need to serve some shared static assets, which may even be referenced outside your site, for example, logo images.</li><li>You may want to reference images using absolute URLs in your Markdown content.</li></ul><p>Take our documentation source files as an example, we are putting the logo of VuePress inside the public directory:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>└─ docs
   ├─ .vuepress
   |  └─ public
   |     └─ images
   |        └─ hero.png  # &lt;- Logo file
   └─ guide
      └─ assets.md       # &lt;- Here we are
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can reference our logo in current page like this:</p><p><strong>Input</strong></p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>![VuePress Logo](/images/hero.png)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Output</strong></p><p><img src="`+t+'" alt="VuePress Logo"></p><h3 id="base-helper" tabindex="-1"><a class="header-anchor" href="#base-helper" aria-hidden="true">#</a> Base Helper</h3>',10),h=a("code",null,"https://foo.github.io/bar/",-1),g=a("code",null,"'/bar/'",-1),b=a("code",null,"https://foo.github.io/bar/images/hero.png",-1),f=d('<p>In most cases, you don&#39;t need to worry about the reference path of those public files, as VuePress will automatically handle <code>base</code> for you:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>&lt;!-- you don&#39;t need to prepend `/bar/` to `/images/hero.png` manually --&gt;\n![VuePress Logo](/images/hero.png)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',2),_=a("code",null,"base",-1),y=a("code",null,"base",-1),w=d(`<div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>&lt;template&gt;
  &lt;img :src=&quot;withBase(logoPath)&quot;&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { ref } from &#39;vue&#39;
import { withBase } from &#39;@vuepress/client&#39;

const logoPath = ref(&#39;/images/hero.png&#39;)
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also access the helper by <code>$withBase</code> directly:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>&lt;img :src=&quot;$withBase(&#39;/images/hero.png&#39;)&quot; alt=&quot;VuePress Logo&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="packages-and-path-aliases" tabindex="-1"><a class="header-anchor" href="#packages-and-path-aliases" aria-hidden="true">#</a> Packages and Path Aliases</h2><p>Although it is not a common usage, you can reference images from dependent packages:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npm install -D package-name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Since markdown image syntax regards image links as relative paths by default, you need to use <code>&lt;img&gt;</code> tag:</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>&lt;img src=&quot;package-name/image.png&quot; alt=&quot;Image from dependency&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The path aliases that set in config file are also supported:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>import { getDirname, path } from &#39;@vuepress/utils&#39;

const __dirname = getDirname(i<wbr>mport.meta.url)

export default {
  alias: {
    &#39;@alias&#39;: path.resolve(__dirname, &#39;./path/to/some/dir&#39;),
  },
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>&lt;img src=&quot;@alias/image.png&quot; alt=&quot;Image from path alias&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),k={class:"custom-container tip"},x=a("p",{class:"custom-container-title"},"prompt",-1);function q(P,L){const s=r("RouterLink");return o(),c("div",null,[m,a("p",null,[e("The default public directory is "),p,e(", which can be changed by "),i(s,{to:"/en-US/reference/config.html#public"},{default:n(()=>[e("public")]),_:1}),e(" option.")]),v,a("p",null,[e("If your site is deployed to a non-root URL, for example, "),h,e(", then the "),i(s,{to:"/en-US/reference/config.html#base"},{default:n(()=>[e("base")]),_:1}),e(" should be set to "),g,e(". Obviously, your public files would be served like "),b,e(" after deployment.")]),f,a("p",null,[e("However, sometimes you may have some dynamical links referencing public files, especially when you are authoring a custom theme. In such case, the "),_,e(" could not be handled automatically. To help with that, VuePress provides a "),i(s,{to:"/en-US/reference/client-api.html#withbase"},{default:n(()=>[e("withBase")]),_:1}),e(" helper to prepend "),y,e(" for you:")]),w,a("div",k,[x,a("p",null,[e("Config reference: "),i(s,{to:"/en-US/reference/plugin-api.html#alias"},{default:n(()=>[e("alias")]),_:1})])])])}const U=l(u,[["render",q],["__file","assets.html.vue"]]);export{U as default};
