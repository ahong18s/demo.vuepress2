import{_ as d,r as l,o as s,c as r,d as o,a as e,b as n,w as c,e as u}from"./app-09910f35.js";const p={},_=e("h1",{id:"内置组件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内置组件","aria-hidden":"true"},"#"),n(" 内置组件")],-1),h=u(`<h2 id="clientonly" tabindex="-1"><a class="header-anchor" href="#clientonly" aria-hidden="true">#</a> ClientOnly</h2><ul><li>使用：</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>&lt;ClientOnly&gt;
  &lt;NonSsrFriendlyComponent /&gt;
&lt;/ClientOnly&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>该组件和它的子元素只会在客户端被渲染。也就是说，它不会在构建 (SSR) 过程中被渲染到 HTML 内。</p><p>如果一个组件在 <code>setup()</code> 中直接使用 浏览器 / DOM API ，它会导致构建过程报错，因为这些 API 在 Node.js 的环境中是无法使用的。在这种情况下，你可以选择一种方式：</p><ul><li>修改这个组件，只在 <code>onBeforeMount()</code> 或 <code>onMounted()</code> Hook 中使用 浏览器 / DOM API 。</li><li>使用 <code>&lt;ClientOnly&gt;</code> 包裹这个组件。</li></ul></li></ul><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> Content</h2><ul><li><p>Props:</p><ul><li>pageKey <ul><li>类型： <code>string</code></li><li>是否必须： <code>false</code></li></ul></li></ul></li><li><p>使用：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>&lt;Content page-key=&quot;v-xxxxxx&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),m=e("p",null,"详情：",-1),g=e("p",null,"该组件会渲染页面的 Markdown 内容。",-1),v={href:"https://router.vuejs.org/zh/api/#name-2",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"pageKey",-1),k=e("p",null,"该组件主要是为了开发主题时使用。在绝大多数情况下你不会用到它。",-1),f=e("p",null,"参考：",-1);function b(y,C){const t=l("NpmBadge"),a=l("ExternalLinkIcon"),i=l("RouterLink");return s(),r("div",null,[_,o(t,{package:"@vuepress/client"}),h,e("ul",null,[e("li",null,[m,g,e("p",null,[n("页面 Key 是页面路由的 "),e("a",v,[n("name"),o(a)]),n(" 。如果没有传入 "),x,n(" Prop ，它会渲染当前路由下的页面。")]),k]),e("li",null,[f,e("ul",null,[e("li",null,[o(i,{to:"/reference/node-api.html#key"},{default:c(()=>[n("Node API > Page 属性 > key")]),_:1})])])])])])}const w=d(p,[["render",b],["__file","components.html.vue"]]);export{w as default};
