import{_ as c,r as a,o as i,c as p,d as s,a as n,b as e,w as d,e as u}from"./app-111ec351.js";const r={},k=n("h1",{id:"内置组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#内置组件","aria-hidden":"true"},"#"),e(" 内置组件")],-1),_=u(`<h2 id="clientonly" tabindex="-1"><a class="header-anchor" href="#clientonly" aria-hidden="true">#</a> ClientOnly</h2><ul><li>使用：</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NonSsrFriendlyComponent</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ClientOnly</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>该组件和它的子元素只会在客户端被渲染。也就是说，它不会在构建 (SSR) 过程中被渲染到 HTML 内。</p><p>如果一个组件在 <code>setup()</code> 中直接使用 浏览器 / DOM API ，它会导致构建过程报错，因为这些 API 在 Node.js 的环境中是无法使用的。在这种情况下，你可以选择一种方式：</p><ul><li>修改这个组件，只在 <code>onBeforeMount()</code> 或 <code>onMounted()</code> Hook 中使用 浏览器 / DOM API 。</li><li>使用 <code>&lt;ClientOnly&gt;</code> 包裹这个组件。</li></ul></li></ul><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> Content</h2><ul><li><p>Props:</p><ul><li>pageKey <ul><li>类型： <code>string</code></li><li>是否必须： <code>false</code></li></ul></li></ul></li><li><p>使用：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token attr-name">page-key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>v-xxxxxx<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),h=n("p",null,"详情：",-1),m=n("p",null,"该组件会渲染页面的 Markdown 内容。",-1),g={href:"https://router.vuejs.org/zh/api/#name-2",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"pageKey",-1),x=n("p",null,"该组件主要是为了开发主题时使用。在绝大多数情况下你不会用到它。",-1),f=n("p",null,"参考：",-1);function b(y,C){const t=a("NpmBadge"),l=a("ExternalLinkIcon"),o=a("RouterLink");return i(),p("div",null,[k,s(t,{package:"@vuepress/client"}),_,n("ul",null,[n("li",null,[h,m,n("p",null,[e("页面 Key 是页面路由的 "),n("a",g,[e("name"),s(l)]),e(" 。如果没有传入 "),v,e(" Prop ，它会渲染当前路由下的页面。")]),x]),n("li",null,[f,n("ul",null,[n("li",null,[s(o,{to:"/reference/node-api.html#key"},{default:d(()=>[e("Node API > Page 属性 > key")]),_:1})])])])])])}const w=c(r,[["render",b],["__file","components.html.vue"]]);export{w as default};
