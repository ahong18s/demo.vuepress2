import{_ as a,r as l,o as r,c,d as o,a as e,b as n,w as d,e as p}from"./app-d19e66db.js";const u={},h=e("h1",{id:"built-in-components",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#built-in-components","aria-hidden":"true"},"#"),n(" Built-in Components")],-1),m=p(`<h2 id="clientonly" tabindex="-1"><a class="header-anchor" href="#clientonly" aria-hidden="true">#</a> ClientOnly</h2><ul><li>Usage:</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">&lt;ClientOnly&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">  &lt;NonSsrFriendlyComponent /&gt;</span></span>
<span class="line"><span style="color:#D4D4D4;">&lt;/ClientOnly&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Details:</p><p>This component and its children will only be rendered in client-side. That means, it will not be rendered to HTML during build (SSR).</p><p>If a component is trying to access Browser / DOM APIs directly in <code>setup()</code>, an error will occur during build because those APIs are unavailable in Node.js environment. In such case, you could do either:</p><ul><li>Modify the component to only access Browser / DOM APIs in <code>onBeforeMount()</code> or <code>onMounted()</code> hook.</li><li>Wrap the component with <code>&lt;ClientOnly&gt;</code>.</li></ul></li></ul><h2 id="content" tabindex="-1"><a class="header-anchor" href="#content" aria-hidden="true">#</a> Content</h2><ul><li><p>Props:</p><ul><li>pageKey <ul><li>Type: <code>string</code></li><li>Required: <code>false</code></li></ul></li></ul></li><li><p>Usage:</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">&lt;Content page-key=&quot;v-xxxxxx&quot; /&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),_=e("p",null,"Details:",-1),g=e("p",null,"This component will render the Markdown content of a page.",-1),y={href:"https://router.vuejs.org/api/#name-2",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"pageKey",-1),b=e("p",null,"This component is mainly for developing themes. You won't need it in most cases.",-1),f=e("p",null,"Also see:",-1);function k(x,D){const t=l("NpmBadge"),s=l("ExternalLinkIcon"),i=l("RouterLink");return r(),c("div",null,[h,o(t,{package:"@vuepress/client"}),m,e("ul",null,[e("li",null,[_,g,e("p",null,[n("The page key is the "),e("a",y,[n("name"),o(s)]),n(" of the page route. If the "),v,n(" prop is not provided, it will render the page of current route.")]),b]),e("li",null,[f,e("ul",null,[e("li",null,[o(i,{to:"/en-US/reference/node-api.html#key"},{default:d(()=>[n("Node API > Page Properties > key")]),_:1})])])])])])}const C=a(u,[["render",k],["__file","components.html.vue"]]);export{C as default};
