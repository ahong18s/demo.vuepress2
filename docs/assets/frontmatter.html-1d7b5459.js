import{_ as s,r as a,o as u,c,d as n,a as e,b as l,w as d,e as i}from"./app-8ceb8f5d.js";const p={},m=e("h1",{id:"frontmatter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#frontmatter","aria-hidden":"true"},"#"),l(" Frontmatter")],-1),h=e("h2",{id:"date",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#date","aria-hidden":"true"},"#"),l(" date")],-1),_=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),v=e("p",null,"详情：",-1),g=e("p",null,"页面的创建日期。",-1),b=e("code",null,"yyyy-MM-dd",-1),f={href:"https://yaml.org/type/timestamp.html",target:"_blank",rel:"noopener noreferrer"},y=e("p",null,"参考：",-1),k=e("h2",{id:"description",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#description","aria-hidden":"true"},"#"),l(" description")],-1),x=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),P=e("li",null,[e("p",null,"详情："),e("p",null,"页面的描述。"),e("p",null,[l("它将会覆盖站点配置中的 "),e("code",null,"description"),l(" 配置项。")])],-1),M=e("p",null,"参考：",-1),w=i(`<h2 id="head" tabindex="-1"><a class="header-anchor" href="#head" aria-hidden="true">#</a> head</h2><ul><li><p>类型： <code>HeadConfig[]</code></p></li><li><p>详情：</p><p>页面 <code>&lt;head&gt;</code> 标签内添加的额外标签。</p></li><li><p>示例：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>---
head:
  - - meta
    - name: foo
      content: yaml 数组语法
  - [meta, { name: bar , content: 方括号语法 }]
---
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>渲染为：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;head&gt;
  &lt;meta name=&quot;foo&quot; content=&quot;yaml 数组语法&quot; /&gt;
  &lt;meta name=&quot;bar&quot; content=&quot;方括号语法&quot; /&gt;
&lt;/head&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),F=e("h2",{id:"lang",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#lang","aria-hidden":"true"},"#"),l(" lang")],-1),N=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),C=e("li",null,[e("p",null,"详情："),e("p",null,"页面的语言。"),e("p",null,[l("它将会覆盖站点配置中的 "),e("code",null,"lang"),l(" 配置项")])],-1),L=e("p",null,"参考：",-1),q=i(`<h2 id="layout" tabindex="-1"><a class="header-anchor" href="#layout" aria-hidden="true">#</a> layout</h2><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>页面的布局。</p><p>布局是由主题提供的。如果你不指定该 Frontmatter ，则会使用默认布局。你应该参考主题自身的文档来了解其提供了哪些布局。</p><p>如果主题布局无法满足你的需求，你可以使用自定义布局组件。</p></li><li><p>示例：</p></li></ul><p>在 <code>.vuepress/client.ts</code> 文件中注册一个布局组件：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>import { defineClientConfig } from &#39;@vuepress/client&#39;
import CustomLayout from &#39;./CustomLayout.vue&#39;

export default defineClientConfig({
  layouts: {
    CustomLayout,
  },
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Frontmatter 中设置自定义布局：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>---
layout: CustomLayout
---
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="permalink" tabindex="-1"><a class="header-anchor" href="#permalink" aria-hidden="true">#</a> permalink</h2>`,7),A=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),I=e("li",null,[e("p",null,"详情："),e("p",null,"页面的永久链接。"),e("p",null,"它将会覆盖根据文件路径来决定的默认路由路径。")],-1),B=e("p",null,"参考：",-1),E=e("li",null,[e("a",{href:"#permalinkpattern"},"Frontmatter > permalinkPattern")],-1),V=i(`<h2 id="permalinkpattern" tabindex="-1"><a class="header-anchor" href="#permalinkpattern" aria-hidden="true">#</a> permalinkPattern</h2><ul><li><p>类型： <code>string | null</code></p></li><li><p>详情：</p><p>为页面生成永久链接的 Pattern 。</p><p>它将会覆盖站点配置中的 <code>permalinkPattern</code> 配置项。</p><p>如果 Frontmatter 中设置了 <code>permalink</code> ，那么这个字段则不会生效。</p></li><li><p>使用：</p><table><thead><tr><th>Pattern</th><th>描述</th></tr></thead><tbody><tr><td><code>:year</code></td><td>创建日期的 年 部分</td></tr><tr><td><code>:month</code></td><td>创建日期的 月 部分</td></tr><tr><td><code>:day</code></td><td>创建日期的 日 部分</td></tr><tr><td><code>:slug</code></td><td>页面文件名的 Slug</td></tr><tr><td><code>:raw</code></td><td>原始路由路径</td></tr></tbody></table><p><code>:year</code>, <code>:month</code> 和 <code>:day</code> Pattern 根据如下优先级进行解析：</p><ul><li>Frontmatter 中的 <code>date</code> 字段。</li><li>符合 <code>yyyy-MM-dd-foobar.md</code> 或 <code>yyyy-MM-foobar.md</code> 日期格式的文件名。</li><li>符合 <code>yyyy/MM/dd/foobar.md</code> 或 <code>yyyy/MM/foobar.md</code> 日期格式的目录名。</li><li>默认值 <code>0000-00-00</code> 。</li></ul></li><li><p>示例 1 ：</p><p>页面文件名是 <code>foo-bar.md</code> 。</p><p>页面 Frontmatter 是：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>---
date: 2021-01-03
permalinkPattern: :year/:month/:day/:slug.html
---
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么页面的永久链接将会是 <code>2021/01/03/foo-bar.html</code> 。</p><ul><li><p>示例 2 ：</p><p>页面文件名是 <code>2021-01-03-bar-baz.md</code>。</p><p>页面 Frontmatter 是：</p></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>---
permalinkPattern: :year/:month/:day/:slug.html
---
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么页面的永久链接将会是 <code>2021/01/03/bar-baz.html</code> 。</p>`,7),R=e("li",null,[e("a",{href:"#date"},"Frontmatter > date")],-1),T=e("li",null,[e("a",{href:"#permalink"},"Frontmatter > permalink")],-1),z=e("h2",{id:"routemeta",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#routemeta","aria-hidden":"true"},"#"),l(" routeMeta")],-1),S=e("li",null,[e("p",null,[l("类型： "),e("code",null,"Record<string, unknown>")])],-1),H=e("li",null,[e("p",null,"详情："),e("p",null,"附加到页面路由的自定义数据。")],-1),Y=e("p",null,"参考：",-1),j=e("h2",{id:"title",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#title","aria-hidden":"true"},"#"),l(" title")],-1),D=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),G=e("li",null,[e("p",null,"详情："),e("p",null,"页面的标题。"),e("p",null,[l("如果你不在 Frontmatter 中设置 "),e("code",null,"title"),l(" ，那么页面中第一个一级标题（即 "),e("code",null,"# title"),l("）的内容会被当作标题使用。")])],-1),J=e("p",null,"参考：",-1);function K(O,Q){const o=a("NpmBadge"),r=a("ExternalLinkIcon"),t=a("RouterLink");return u(),c("div",null,[m,n(o,{package:"@vuepress/client"}),n(o,{package:"@vuepress/markdown"}),h,e("ul",null,[_,e("li",null,[v,g,e("p",null,[l("应按照 "),b,l(" 的格式来指定日期，或者遵循 "),e("a",f,[l("YAML Timestamp Type"),n(r)]),l(" 。")])]),e("li",null,[y,e("ul",null,[e("li",null,[n(t,{to:"/reference/node-api.html#date"},{default:d(()=>[l("Node API > Page 属性 > date")]),_:1})])])])]),k,e("ul",null,[x,P,e("li",null,[M,e("ul",null,[e("li",null,[n(t,{to:"/reference/config.html#description"},{default:d(()=>[l("配置 > description")]),_:1})])])])]),w,e("ul",null,[e("li",null,[l("参考： "),e("ul",null,[e("li",null,[n(t,{to:"/reference/config.html#head"},{default:d(()=>[l("配置 > head")]),_:1})])])])]),F,e("ul",null,[N,C,e("li",null,[L,e("ul",null,[e("li",null,[n(t,{to:"/reference/config.html#lang"},{default:d(()=>[l("配置 > lang")]),_:1})]),e("li",null,[n(t,{to:"/reference/node-api.html#lang"},{default:d(()=>[l("Node API > Page 属性 > lang")]),_:1})])])])]),q,e("ul",null,[A,I,e("li",null,[B,e("ul",null,[E,e("li",null,[n(t,{to:"/guide/page.html#%E8%B7%AF%E7%94%B1"},{default:d(()=>[l("指南 > 页面 > 路由")]),_:1})]),e("li",null,[n(t,{to:"/reference/node-api.html#permalink"},{default:d(()=>[l("Node API > Page 属性 > permalink")]),_:1})])])])]),V,e("ul",null,[e("li",null,[l("参考： "),e("ul",null,[e("li",null,[n(t,{to:"/reference/config.html#permalinkpattern"},{default:d(()=>[l("配置 > permalinkPattern")]),_:1})]),R,T,e("li",null,[n(t,{to:"/reference/node-api.html#permalink"},{default:d(()=>[l("Node API > Page 属性 > permalink")]),_:1})])])])]),z,e("ul",null,[S,H,e("li",null,[Y,e("ul",null,[e("li",null,[n(t,{to:"/reference/node-api.html#routeMeta"},{default:d(()=>[l("Node API > Page 属性 > routeMeta")]),_:1})])])])]),j,e("ul",null,[D,G,e("li",null,[J,e("ul",null,[e("li",null,[n(t,{to:"/reference/node-api.html#title"},{default:d(()=>[l("Node API > Page 属性 > title")]),_:1})])])])])])}const W=s(p,[["render",K],["__file","frontmatter.html.vue"]]);export{W as default};
