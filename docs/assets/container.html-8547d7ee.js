import{_ as d,r as t,o as c,c as u,d as i,a as e,b as n,w as s,e as l}from"./app-8ceb8f5d.js";const p={},h=e("h1",{id:"container",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#container","aria-hidden":"true"},"#"),n(" container")],-1),f=e("p",null,"Register markdown custom containers in your VuePress site.",-1),m={href:"https://github.com/markdown-it/markdown-it-container",target:"_blank",rel:"noopener noreferrer"},v=l(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npm i -D @vuepress/plugin-container@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>import { containerPlugin } from &#39;@vuepress/plugin-container&#39;

export default {
  plugins: [
    containerPlugin({
      // options
    }),
  ],
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="container-syntax" tabindex="-1"><a class="header-anchor" href="#container-syntax" aria-hidden="true">#</a> Container Syntax</h2><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>::: &lt;type&gt; [info]
[content]
:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <code>type</code> is required and should be specified via <a href="#type">type</a> option.</li><li>The <code>info</code> is optional, and the default value can be specified via <code>defaultInfo</code> in <a href="#locales">locales</a> option.</li><li>The <code>content</code> can be any valid markdown content.</li></ul><div class="custom-container tip"><p class="custom-container-title">prompt</p><p>This plugin can be used multiple times to support different types of containers.</p></div><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3>`,9),b=e("li",null,[e("p",null,[n("Type: "),e("code",null,"string")])],-1),g=e("p",null,"Details:",-1),_=e("p",null,"The type of the container.",-1),y=e("code",null,"name",-1),k={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},x=l(`<h3 id="locales" tabindex="-1"><a class="header-anchor" href="#locales" aria-hidden="true">#</a> locales</h3><ul><li><p>Type: <code>Record&lt;string, { defaultInfo: string }&gt;</code></p></li><li><p>Details:</p><p>The default <code>info</code> of the container in different locales.</p><p>If this option is not specified, the default <code>info</code> will fallback to the uppercase of the <a href="#type">type</a> option.</p></li><li><p>Example:</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>export default {
  plugins: [
    containerPlugin({
      type: &#39;tip&#39;,
      locales: {
        &#39;/&#39;: {
          defaultInfo: &#39;TIP&#39;,
        },
        &#39;/zh/&#39;: {
          defaultInfo: &#39;提示&#39;,
        },
      },
    }),
  ],
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w=l(`<h3 id="before" tabindex="-1"><a class="header-anchor" href="#before" aria-hidden="true">#</a> before</h3><ul><li><p>Type: <code>(info: string) =&gt; string</code></p></li><li><p>Default:</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>(info: string): string =&gt;
  \`&lt;div class=&quot;custom-container \${type}&quot;&gt;\${info ? \`&lt;p class=&quot;custom-container-title&quot;&gt;\${info}&lt;/p&gt;\` : &#39;&#39;}\\n\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Details:</p><p>A function to render the starting tag of the container.</p><p>The first param is the <code>info</code> part of <a href="#container-syntax">container syntax</a>.</p><p>This option will not take effect if you don&#39;t specify the <a href="#after">after</a> option.</p></li></ul><h3 id="after" tabindex="-1"><a class="header-anchor" href="#after" aria-hidden="true">#</a> after</h3><ul><li><p>Type: <code>(info: string) =&gt; string</code></p></li><li><p>Default:</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>(): string =&gt; &#39;&lt;/div&gt;\\n&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>Details:</p><p>A function to render the ending tag of the container.</p><p>The first param is the <code>info</code> part of <a href="#container-syntax">container syntax</a>.</p><p>This option will not take effect if you don&#39;t specify the <a href="#before">before</a> option.</p></li></ul><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h3><ul><li>Type:</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>type MarkdownItContainerRenderFunction = (
  tokens: Token[],
  index: number,
  options: any,
  env: MarkdownEnv,
  self: Renderer
) =&gt; string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),T=e("p",null,"Details:",-1),I=e("code",null,"render",-1),D={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,[n("This plugin uses a default "),e("code",null,"render"),n(" function. If you specify this option, the default "),e("code",null,"render"),n(" function will be replaced, and the "),e("a",{href:"#locales"},"locales"),n(", "),e("a",{href:"#before"},"before"),n(" and "),e("a",{href:"#after"},"after"),n(" options will be ignored.")],-1),N=e("h3",{id:"validate",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#validate","aria-hidden":"true"},"#"),n(" validate")],-1),R=e("li",null,[e("p",null,[n("Type: "),e("code",null,"(params: string) => boolean")])],-1),q=e("p",null,"Details:",-1),B=e("code",null,"validate",-1),E={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},P=e("h3",{id:"marker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#marker","aria-hidden":"true"},"#"),n(" marker")],-1),V=e("li",null,[e("p",null,[n("Type: "),e("code",null,"string")])],-1),L=e("p",null,"Details:",-1),S=e("code",null,"marker",-1),A={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"};function U($,M){const o=t("NpmBadge"),a=t("ExternalLinkIcon"),r=t("RouterLink");return c(),u("div",null,[h,i(o,{package:"@vuepress/plugin-container"}),f,e("p",null,[n("This plugin simplifies the use of "),e("a",m,[n("markdown-it-container"),i(a)]),n(", but also retains its original capabilities.")]),e("p",null,[n("The "),i(r,{to:"/en-US/reference/default-theme/markdown.html#custom-containers"},{default:s(()=>[n("Custom Containers")]),_:1}),n(" of default theme is powered by this plugin.")]),v,e("ul",null,[b,e("li",null,[g,_,e("p",null,[n("It will be used as the "),y,n(" param of "),e("a",k,[n("markdown-it-container"),i(a)]),n(".")])])]),x,e("ul",null,[e("li",null,[n("Also see: "),e("ul",null,[e("li",null,[i(r,{to:"/en-US/guide/i18n.html"},{default:s(()=>[n("Guide > I18n")]),_:1})])])])]),w,e("ul",null,[e("li",null,[T,e("p",null,[n("The "),I,n(" option of "),e("a",D,[n("markdown-it-container"),i(a)]),n(".")]),C])]),N,e("ul",null,[R,e("li",null,[q,e("p",null,[n("The "),B,n(" option of "),e("a",E,[n("markdown-it-container"),i(a)]),n(".")])])]),P,e("ul",null,[V,e("li",null,[L,e("p",null,[n("The "),S,n(" option of "),e("a",A,[n("markdown-it-container"),i(a)]),n(".")])])])])}const F=d(p,[["render",U],["__file","container.html.vue"]]);export{F as default};
