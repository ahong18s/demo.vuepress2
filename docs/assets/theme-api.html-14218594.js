import{_ as r,r as a,o as u,c as s,d as t,a as e,b as l,w as i,e as o}from"./app-8ceb8f5d.js";const p={},c=e("h1",{id:"主题-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#主题-api","aria-hidden":"true"},"#"),l(" 主题 API")],-1),h=o(`<h2 id="基础配置项" tabindex="-1"><a class="header-anchor" href="#基础配置项" aria-hidden="true">#</a> 基础配置项</h2><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><ul><li><p>类型： <code>string</code></p></li><li><p>详情：</p><p>主题的名称。</p><p>它应遵从如下命名约定，并且在发布到 NPM 时应确保和包名保持一致：</p><ul><li>非 Scoped: <code>vuepress-theme-foo</code></li><li>Scoped: <code>@org/vuepress-theme-foo</code></li></ul></li></ul><h3 id="multiple" tabindex="-1"><a class="header-anchor" href="#multiple" aria-hidden="true">#</a> multiple</h3><ul><li><p>详情：</p><p>主题永远不能被多次使用，因此主题 API 不支持该配置项。</p></li></ul><h2 id="主题特定配置项" tabindex="-1"><a class="header-anchor" href="#主题特定配置项" aria-hidden="true">#</a> 主题特定配置项</h2><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h3><ul><li><p>类型： <code>Theme</code></p></li><li><p>详情：</p><p>要继承的主题。</p><p>父主题的所有主题 API 都会被继承，但是子主题不会直接覆盖父主题。主题特定的配置项会根据以下规则进行覆盖：</p><ul><li><a href="#plugins">plugins</a>： 当同一个插件在子主题和父主题中都被使用时，如果该插件不支持被多次使用，那么只有在子主题中使用的插件会生效。</li><li><a href="#templatebuild">templateBuild</a> / <a href="#templatedev">templateDev</a>： 子主题的模板会覆盖父主题的模板。</li></ul><p>支持多级继承，即主题 B 可以继承主题 A ，然后主题 C 可以继承主题 B 。换句话说，一个主题可以有一个父主题、一个祖父主题等等。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>import { defaultTheme } from &#39;@vuepress/theme-default&#39;
import { getDirname, path } from &#39;@vuepress/utils&#39;

const __dirname = getDirname(i<wbr>mport.meta.url)

export default {
  // 继承默认主题
  extends: defaultTheme(),
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> plugins</h3>`,10),m=e("li",null,[e("p",null,[l("类型： "),e("code",null,"(Plugin | Plugin[])[]")])],-1),_=e("li",null,[e("p",null,"详情："),e("p",null,"主题中要使用的插件。")],-1),f=e("p",null,"参考：",-1),v=e("h3",{id:"templatebuild",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#templatebuild","aria-hidden":"true"},"#"),l(" templateBuild")],-1),b=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),g=e("p",null,"详情：",-1),x=e("p",null,"指定构建时使用的 HTML 模板路径。",-1),B=e("p",null,"参考：",-1),P=e("h3",{id:"templatebuildrenderer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#templatebuildrenderer","aria-hidden":"true"},"#"),l(" templateBuildRenderer")],-1),T=e("li",null,[e("p",null,[l("类型： "),e("code",null,"TemplateRenderer"),l(" from "),e("code",null,"@vuepress/utils")])],-1),A=e("p",null,"详情：",-1),N=e("p",null,"指定构建时使用的 HTML 模板渲染函数。",-1),D=e("p",null,"参考：",-1),R=e("h3",{id:"templatedev",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#templatedev","aria-hidden":"true"},"#"),l(" templateDev")],-1),k=e("li",null,[e("p",null,[l("类型： "),e("code",null,"string")])],-1),I=e("p",null,"详情：",-1),L=e("p",null,"指定开发时使用的 HTML 模板。",-1),V=e("p",null,"参考：",-1);function M(w,C){const d=a("NpmBadge"),n=a("RouterLink");return u(),s("div",null,[c,t(d,{package:"@vuepress/core"}),e("p",null,[l("VuePress 主题同样是一个插件，因此主题 API 可以接收 "),t(n,{to:"/reference/plugin-api.html"},{default:i(()=>[l("插件 API")]),_:1}),l(" 的所有选项，但存在以下差别：")]),h,e("ul",null,[m,_,e("li",null,[f,e("ul",null,[e("li",null,[t(n,{to:"/reference/config.html#plugins"},{default:i(()=>[l("配置 > plugins")]),_:1})])])])]),v,e("ul",null,[b,e("li",null,[g,x,e("p",null,[l("它会覆盖 "),t(n,{to:"/reference/config.html#templatebuild"},{default:i(()=>[l("templateBuild")]),_:1}),l(" 的默认值，同时也会被用户配置覆盖。")])]),e("li",null,[B,e("ul",null,[e("li",null,[t(n,{to:"/reference/config.html#templatebuild"},{default:i(()=>[l("配置 > templateBuild")]),_:1})])])])]),P,e("ul",null,[T,e("li",null,[A,N,e("p",null,[l("它会覆盖 "),t(n,{to:"/reference/config.html#templatebuildrenderer"},{default:i(()=>[l("templateBuildRenderer")]),_:1}),l(" 的默认值，同时也会被用户配置覆盖。")])]),e("li",null,[D,e("ul",null,[e("li",null,[t(n,{to:"/reference/config.html#templatebuildrenderer"},{default:i(()=>[l("配置 > templateBuildRenderer")]),_:1})])])])]),R,e("ul",null,[k,e("li",null,[I,L,e("p",null,[l("它会覆盖 "),t(n,{to:"/reference/config.html#templatedev"},{default:i(()=>[l("templateDev")]),_:1}),l(" 的默认值，但是也会被用户配置覆盖。")])]),e("li",null,[V,e("ul",null,[e("li",null,[t(n,{to:"/reference/config.html#templatedev"},{default:i(()=>[l("配置 > templateDev")]),_:1})])])])])])}const S=r(p,[["render",M],["__file","theme-api.html.vue"]]);export{S as default};
