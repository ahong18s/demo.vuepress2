import{_ as o,r as l,o as c,c as u,d as i,a as e,b as n,w as t,e as r}from"./app-09910f35.js";const p={},h=e("h1",{id:"container",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#container","aria-hidden":"true"},"#"),n(" container")],-1),v=e("p",null,"为你的 VuePress 站点注册自定义容器。",-1),m={href:"https://github.com/markdown-it/markdown-it-container",target:"_blank",rel:"noopener noreferrer"},b=r(`<h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npm i -D @vuepress/plugin-container@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>import { containerPlugin } from &#39;@vuepress/plugin-container&#39;

export default {
  plugins: [
    containerPlugin({
      // 配置项
    }),
  ],
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="容器语法" tabindex="-1"><a class="header-anchor" href="#容器语法" aria-hidden="true">#</a> 容器语法</h2><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>::: &lt;type&gt; [info]
[content]
:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>type</code> 是必需的，应通过 <a href="#type">type</a> 配置项来指定。</li><li><code>info</code> 是可选的，其默认值可以通过 <a href="#locales">locales</a> 的 <code>defaultInfo</code> 配置项来指定。</li><li><code>content</code> 可是任何合法的 Markdown 内容。</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>该插件可以被多次使用，以便支持不同类型的容器。</p></div><h2 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> type</h3>`,9),f=e("li",null,[e("p",null,[n("类型： "),e("code",null,"string")])],-1),_=e("p",null,"详情：",-1),g=e("p",null,"容器的类型。",-1),k={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"name",-1),w=r(`<h3 id="locales" tabindex="-1"><a class="header-anchor" href="#locales" aria-hidden="true">#</a> locales</h3><ul><li><p>类型： <code>Record&lt;string, { defaultInfo: string }&gt;</code></p></li><li><p>详情：</p><p>容器在不同 locales 下的默认 <code>info</code> 。</p><p>如果没有指定该配置项，默认 <code>info</code> 会使用大写的 <a href="#type">type</a> 。</p></li><li><p>示例：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>export default {
  plugins: [
    containerPlugin({
      type: &#39;tip&#39;,
      locales: {
        &#39;/&#39;: {
          defaultInfo: &#39;TIP&#39;,
        },
        &#39;/zh/&#39;: {
          defaultInfo: &#39;提示&#39;,
        },
      },
    }),
  ],
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=r(`<h3 id="before" tabindex="-1"><a class="header-anchor" href="#before" aria-hidden="true">#</a> before</h3><ul><li><p>类型： <code>(info: string) =&gt; string</code></p></li><li><p>默认值：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>(info: string): string =&gt;
  \`&lt;div class=&quot;custom-container \${type}&quot;&gt;\${info ? \`&lt;p class=&quot;custom-container-title&quot;&gt;\${info}&lt;/p&gt;\` : &#39;&#39;}\\n\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>一个用于渲染容器起始标签的函数。</p><p>第一个参数是 <a href="#%E5%AE%B9%E5%99%A8%E8%AF%AD%E6%B3%95">容器语法</a> 的 <code>info</code> 部分。</p><p>如果你没有设置 <a href="#after">after</a> 配置项，则该配置项也不会生效。</p></li></ul><h3 id="after" tabindex="-1"><a class="header-anchor" href="#after" aria-hidden="true">#</a> after</h3><ul><li><p>类型： <code>(info: string) =&gt; string</code></p></li><li><p>默认值：</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>(): string =&gt; &#39;&lt;/div&gt;\\n&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>详情：</p><p>一个用于渲染容器结束标签的函数。</p><p>第一个参数是 <a href="#%E5%AE%B9%E5%99%A8%E8%AF%AD%E6%B3%95">容器语法</a> 的 <code>info</code> 部分。</p><p>如果你没有设置 <a href="#before">before</a> 配置项，则该配置项也不会生效。</p></li></ul><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render" aria-hidden="true">#</a> render</h3><ul><li>类型：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>type MarkdownItContainerRenderFunction = (
  tokens: Token[],
  index: number,
  options: any,
  env: MarkdownEnv,
  self: Renderer
) =&gt; string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),E=e("p",null,"详情：",-1),A={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},B=e("code",null,"render",-1),I=e("p",null,[n("该插件使用了一个默认的 "),e("code",null,"render"),n(" 函数。但如果你指定了该配置项，那么默认的 "),e("code",null,"render"),n(" 函数就会被替换掉，此时 "),e("a",{href:"#locales"},"locales"),n(" 、 "),e("a",{href:"#before"},"before"),n(" 和 "),e("a",{href:"#after"},"after"),n(" 配置项都会被忽略。")],-1),N=e("h3",{id:"validate",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#validate","aria-hidden":"true"},"#"),n(" validate")],-1),P=e("li",null,[e("p",null,[n("类型： "),e("code",null,"(params: string) => boolean")])],-1),R=e("p",null,"详情：",-1),V={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"validate",-1),L=e("h3",{id:"marker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#marker","aria-hidden":"true"},"#"),n(" marker")],-1),C=e("li",null,[e("p",null,[n("类型： "),e("code",null,"string")])],-1),D=e("p",null,"详情：",-1),F={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"marker",-1);function T($,z){const s=l("NpmBadge"),a=l("ExternalLinkIcon"),d=l("RouterLink");return c(),u("div",null,[h,i(s,{package:"@vuepress/plugin-container"}),v,e("p",null,[n("该插件简化了 "),e("a",m,[n("markdown-it-container"),i(a)]),n(" 的使用方法，但同时也保留了其原本的能力。")]),e("p",null,[n("默认主题的 "),i(d,{to:"/reference/default-theme/markdown.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8"},{default:t(()=>[n("自定义容器")]),_:1}),n(" 就是由该插件支持的。")]),b,e("ul",null,[f,e("li",null,[_,g,e("p",null,[n("它将会被用作 "),e("a",k,[n("markdown-it-container"),i(a)]),n(" 的 "),x,n(" 参数。")])])]),w,e("ul",null,[e("li",null,[n("参考： "),e("ul",null,[e("li",null,[i(d,{to:"/guide/i18n.html"},{default:t(()=>[n("指南 > 多语言支持")]),_:1})])])])]),y,e("ul",null,[e("li",null,[E,e("p",null,[e("a",A,[n("markdown-it-container"),i(a)]),n(" 的 "),B,n(" 配置项。")]),I])]),N,e("ul",null,[P,e("li",null,[R,e("p",null,[e("a",V,[n("markdown-it-container"),i(a)]),n(" 的 "),q,n(" 配置项。")])])]),L,e("ul",null,[C,e("li",null,[D,e("p",null,[e("a",F,[n("markdown-it-container"),i(a)]),n(" 的 "),M,n(" 配置项。")])])])])}const j=o(p,[["render",T],["__file","container.html.vue"]]);export{j as default};
